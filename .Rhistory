geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
# Counterfactual Effect (1|1) - (0|1)
x_values <- 0:4
y_values_lower <- c(`B_(1|1)-(0|1)`(1, p, drug)[1], `B_(1|1)-(0|1)`(2, p, drug)[1], `B_(1|1)-(0|1)`(3, p, drug)[1], `B_(1|1)-(0|1)`(4, p, drug)[1], `B_(1|1)-(0|1)`(5, p, drug)[1])
y_values_upper <- c(`B_(1|1)-(0|1)`(1, p, drug)[2], `B_(1|1)-(0|1)`(2, p, drug)[2], `B_(1|1)-(0|1)`(3, p, drug)[2], `B_(1|1)-(0|1)`(4, p, drug)[2], `B_(1|1)-(0|1)`(5, p, drug)[2])
y_values <- c(`F_(1|1)`(1, drug) - `F_(0|1)`(1, drug), `F_(1|1)`(2, drug) - `F_(0|1)`(2, drug), `F_(1|1)`(3, drug) - `F_(0|1)`(3, drug), `F_(1|1)`(4, drug) - `F_(0|1)`(4, drug), `F_(1|1)`(5, drug) - `F_(0|1)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p4 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
# Counterfactual Effect (0|1) - (0|0)
x_values <- 0:4
y_values_lower <- c(`B_(0|1)-(0|0)`(1, p, drug)[1], `B_(0|1)-(0|0)`(2, p, drug)[1], `B_(0|1)-(0|0)`(3, p, drug)[1], `B_(0|1)-(0|0)`(4, p, drug)[1], `B_(0|1)-(0|0)`(5, p, drug)[1])
y_values_upper <- c(`B_(0|1)-(0|0)`(1, p, drug)[2], `B_(0|1)-(0|0)`(2, p, drug)[2], `B_(0|1)-(0|0)`(3, p, drug)[2], `B_(0|1)-(0|0)`(4, p, drug)[2], `B_(0|1)-(0|0)`(5, p, drug)[2])
y_values <- c(`F_(0|1)`(1, drug) - `F_(0|0)`(1, drug), `F_(0|1)`(2, drug) - `F_(0|0)`(2, drug), `F_(0|1)`(3, drug) - `F_(0|0)`(3, drug), `F_(0|1)`(4, drug) - `F_(0|0)`(4, drug), `F_(0|1)`(5, drug) - `F_(0|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p5 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/OverallEffect_rec.pdf"), plot = p1, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(1_1)-(1_0)_rec.pdf"), plot = p2, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(1_0)-(0_0)_rec.pdf"), plot = p3, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(1_1)-(0_1)_rec.pdf"), plot = p4, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(0_1)-(0_0)_rec.pdf"), plot = p5, device = cairo_pdf, width = 5, height = 5)
# Overall Effect (1|1) - (0|0)
x_values <- 0:4
y_values_lower <- c(`B_(1|1)-(0|0)_restr`(1, p, drug)[1], `B_(1|1)-(0|0)_restr`(2, p, drug)[1], `B_(1|1)-(0|0)_restr`(3, p, drug)[1], `B_(1|1)-(0|0)_restr`(4, p, drug)[1], `B_(1|1)-(0|0)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(1|1)-(0|0)_restr`(1, p, drug)[2], `B_(1|1)-(0|0)_restr`(2, p, drug)[2], `B_(1|1)-(0|0)_restr`(3, p, drug)[2], `B_(1|1)-(0|0)_restr`(4, p, drug)[2], `B_(1|1)-(0|0)_restr`(5, p, drug)[2])
y_values <- c(`F_(1|1)`(1, drug) - `F_(0|0)`(1, drug), `F_(1|1)`(2, drug) - `F_(0|0)`(2, drug), `F_(1|1)`(3, drug) - `F_(0|0)`(3, drug), `F_(1|1)`(4, drug) - `F_(0|0)`(4, drug), `F_(1|1)`(5, drug) - `F_(0|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p6 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
# Counterfactual Effect (1|1) - (1|0)
x_values <- 0:4
y_values_lower <- c(`B_(1|1)-(1|0)_restr`(1, p, drug)[1], `B_(1|1)-(1|0)_restr`(2, p, drug)[1], `B_(1|1)-(1|0)_restr`(3, p, drug)[1], `B_(1|1)-(1|0)_restr`(4, p, drug)[1], `B_(1|1)-(1|0)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(1|1)-(1|0)_restr`(1, p, drug)[2], `B_(1|1)-(1|0)_restr`(2, p, drug)[2], `B_(1|1)-(1|0)_restr`(3, p, drug)[2], `B_(1|1)-(1|0)_restr`(4, p, drug)[2], `B_(1|1)-(1|0)_restr`(5, p, drug)[2])
y_values <- c(`F_(1|1)`(1, drug) - `F_(1|0)`(1, drug), `F_(1|1)`(2, drug) - `F_(1|0)`(2, drug), `F_(1|1)`(3, drug) - `F_(1|0)`(3, drug), `F_(1|1)`(4, drug) - `F_(1|0)`(4, drug), `F_(1|1)`(5, drug) - `F_(1|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p7 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
# Counterfactual Effect (1|0) - (0|0)
x_values <- 0:4
y_values_lower <- c(`B_(1|0)-(0|0)_restr`(1, p, drug)[1], `B_(1|0)-(0|0)_restr`(2, p, drug)[1], `B_(1|0)-(0|0)_restr`(3, p, drug)[1], `B_(1|0)-(0|0)_restr`(4, p, drug)[1], `B_(1|0)-(0|0)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(1|0)-(0|0)_restr`(1, p, drug)[2], `B_(1|0)-(0|0)_restr`(2, p, drug)[2], `B_(1|0)-(0|0)_restr`(3, p, drug)[2], `B_(1|0)-(0|0)_restr`(4, p, drug)[2], `B_(1|0)-(0|0)_restr`(5, p, drug)[2])
y_values <- c(`F_(1|0)`(1, drug) - `F_(0|0)`(1, drug), `F_(1|0)`(2, drug) - `F_(0|0)`(2, drug), `F_(1|0)`(3, drug) - `F_(0|0)`(3, drug), `F_(1|0)`(4, drug) - `F_(0|0)`(4, drug), `F_(1|0)`(5, drug) - `F_(0|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p8 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
# Counterfactual Effect (1|1) - (0|1)
x_values <- 0:4
y_values_lower <- c(`B_(1|1)-(0|1)_restr`(1, p, drug)[1], `B_(1|1)-(0|1)_restr`(2, p, drug)[1], `B_(1|1)-(0|1)_restr`(3, p, drug)[1], `B_(1|1)-(0|1)_restr`(4, p, drug)[1], `B_(1|1)-(0|1)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(1|1)-(0|1)_restr`(1, p, drug)[2], `B_(1|1)-(0|1)_restr`(2, p, drug)[2], `B_(1|1)-(0|1)_restr`(3, p, drug)[2], `B_(1|1)-(0|1)_restr`(4, p, drug)[2], `B_(1|1)-(0|1)_restr`(5, p, drug)[2])
y_values <- c(`F_(1|1)`(1, drug) - `F_(0|1)`(1, drug), `F_(1|1)`(2, drug) - `F_(0|1)`(2, drug), `F_(1|1)`(3, drug) - `F_(0|1)`(3, drug), `F_(1|1)`(4, drug) - `F_(0|1)`(4, drug), `F_(1|1)`(5, drug) - `F_(0|1)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p9 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
# Counterfactual Effect (0|1) - (0|0)
x_values <- 0:4
y_values_lower <- c(`B_(0|1)-(0|0)_restr`(1, p, drug)[1], `B_(0|1)-(0|0)_restr`(2, p, drug)[1], `B_(0|1)-(0|0)_restr`(3, p, drug)[1], `B_(0|1)-(0|0)_restr`(4, p, drug)[1], `B_(0|1)-(0|0)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(0|1)-(0|0)_restr`(1, p, drug)[2], `B_(0|1)-(0|0)_restr`(2, p, drug)[2], `B_(0|1)-(0|0)_restr`(3, p, drug)[2], `B_(0|1)-(0|0)_restr`(4, p, drug)[2], `B_(0|1)-(0|0)_restr`(5, p, drug)[2])
y_values <- c(`F_(0|1)`(1, drug) - `F_(0|0)`(1, drug), `F_(0|1)`(2, drug) - `F_(0|0)`(2, drug), `F_(0|1)`(3, drug) - `F_(0|0)`(3, drug), `F_(0|1)`(4, drug) - `F_(0|0)`(4, drug), `F_(0|1)`(5, drug) - `F_(0|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p10 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(-0.15,0.15))
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/OverallEffect_restr_rec.pdf"), plot = p6, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(1_1)-(1_0)_restr_rec.pdf"), plot = p7, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(1_0)-(0_0)_restr_rec.pdf"), plot = p8, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(1_1)-(0_1)_restr_rec.pdf"), plot = p9, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/CounterfactualEffect_(0_1)-(0_0)_restr_rec.pdf"), plot = p10, device = cairo_pdf, width = 5, height = 5)
# We add 4 graphics for F_(0|0), F_(1|0), F_(0|1) and F_(1|1)
# Compute critical value: (0|0)
"c_(0|0)" <- function(p, drug){
mat <- cbind(
abs(get(paste("F_(0|0)_draws", drug, sep = "_"))[, 1] - `F_(0|0)`(1, drug)) / `s_k_00`(1, drug),
abs(get(paste("F_(0|0)_draws", drug, sep = "_"))[, 2] - `F_(0|0)`(2, drug)) / `s_k_00`(2, drug),
abs(get(paste("F_(0|0)_draws", drug, sep = "_"))[, 3] - `F_(0|0)`(3, drug)) / `s_k_00`(3, drug),
abs(get(paste("F_(0|0)_draws", drug, sep = "_"))[, 4] - `F_(0|0)`(4, drug)) / `s_k_00`(4, drug),
abs(get(paste("F_(0|0)_draws", drug, sep = "_"))[, 5] - `F_(0|0)`(5, drug)) / `s_k_00`(5, drug)
)
dist <- apply(mat, MARGIN = 1, max)
quantile(dist, probs = p)
}
# Compute critical value: (1|0)
"c_(1|0)" <- function(p, drug){
mat <- cbind(
abs(get(paste("F_(1|0)_draws", drug, sep = "_"))[, 1] - `F_(1|0)`(1, drug)) / `s_k_10`(1, drug),
abs(get(paste("F_(1|0)_draws", drug, sep = "_"))[, 2] - `F_(1|0)`(2, drug)) / `s_k_10`(2, drug),
abs(get(paste("F_(1|0)_draws", drug, sep = "_"))[, 3] - `F_(1|0)`(3, drug)) / `s_k_10`(3, drug),
abs(get(paste("F_(1|0)_draws", drug, sep = "_"))[, 4] - `F_(1|0)`(4, drug)) / `s_k_10`(4, drug),
abs(get(paste("F_(1|0)_draws", drug, sep = "_"))[, 5] - `F_(1|0)`(5, drug)) / `s_k_10`(5, drug)
)
dist <- apply(mat, MARGIN = 1, max)
quantile(dist, probs = p)
}
# Compute critical value: (0|1)
"c_(0|1)" <- function(p, drug){
mat <- cbind(
abs(get(paste("F_(0|1)_draws", drug, sep = "_"))[, 1] - `F_(0|1)`(1, drug)) / `s_k_01`(1, drug),
abs(get(paste("F_(0|1)_draws", drug, sep = "_"))[, 2] - `F_(0|1)`(2, drug)) / `s_k_01`(2, drug),
abs(get(paste("F_(0|1)_draws", drug, sep = "_"))[, 3] - `F_(0|1)`(3, drug)) / `s_k_01`(3, drug),
abs(get(paste("F_(0|1)_draws", drug, sep = "_"))[, 4] - `F_(0|1)`(4, drug)) / `s_k_01`(4, drug),
abs(get(paste("F_(0|1)_draws", drug, sep = "_"))[, 5] - `F_(0|1)`(5, drug)) / `s_k_01`(5, drug)
)
dist <- apply(mat, MARGIN = 1, max)
quantile(dist, probs = p)
}
# Compute critical value: (1|1)
"c_(1|1)" <- function(p, drug){
mat <- cbind(
abs(get(paste("F_(1|1)_draws", drug, sep = "_"))[, 1] - `F_(1|1)`(1, drug)) / `s_k_11`(1, drug),
abs(get(paste("F_(1|1)_draws", drug, sep = "_"))[, 2] - `F_(1|1)`(2, drug)) / `s_k_11`(2, drug),
abs(get(paste("F_(1|1)_draws", drug, sep = "_"))[, 3] - `F_(1|1)`(3, drug)) / `s_k_11`(3, drug),
abs(get(paste("F_(1|1)_draws", drug, sep = "_"))[, 4] - `F_(1|1)`(4, drug)) / `s_k_11`(4, drug),
abs(get(paste("F_(1|1)_draws", drug, sep = "_"))[, 5] - `F_(1|1)`(5, drug)) / `s_k_11`(5, drug)
)
dist <- apply(mat, MARGIN = 1, max)
quantile(dist, probs = p)
}
# Cdf-band for level p
"B_(0|0)" <- function(j, p, drug){
as.numeric(c(`F_(0|0)`(j, drug) - `c_(0|0)`(p, drug) * `s_k_00`(j, drug), `F_(0|0)`(j, drug) + `c_(0|0)`(p, drug) * `s_k_00`(j, drug)))
}
"B_(1|0)" <- function(j, p, drug){
as.numeric(c(`F_(1|0)`(j, drug) - `c_(1|0)`(p, drug) * `s_k_10`(j, drug), `F_(1|0)`(j, drug) + `c_(1|0)`(p, drug) * `s_k_10`(j, drug)))
}
"B_(0|1)" <- function(j, p, drug){
as.numeric(c(`F_(0|1)`(j, drug) - `c_(0|1)`(p, drug) * `s_k_01`(j, drug), `F_(0|1)`(j, drug) + `c_(0|1)`(p, drug) * `s_k_01`(j, drug)))
}
"B_(1|1)" <- function(j, p, drug){
as.numeric(c(`F_(1|1)`(j, drug) - `c_(1|1)`(p, drug) * `s_k_11`(j, drug), `F_(1|1)`(j, drug) + `c_(1|1)`(p, drug) * `s_k_11`(j, drug)))
}
"B_(0|0)_restr" <- function(j, p, drug){
as.numeric(c(max(0, `F_(0|0)`(j, drug) - `c_(0|0)`(p, drug) * `s_k_00`(j, drug)), min(1, `F_(0|0)`(j, drug) + `c_(0|0)`(p, drug) * `s_k_00`(j, drug))))
}
"B_(1|0)_restr" <- function(j, p, drug){
as.numeric(c(max(0, `F_(1|0)`(j, drug) - `c_(1|0)`(p, drug) * `s_k_10`(j, drug)), min(1, `F_(1|0)`(j, drug) + `c_(1|0)`(p, drug) * `s_k_10`(j, drug))))
}
"B_(0|1)_restr" <- function(j, p, drug){
as.numeric(c(max(0, `F_(0|1)`(j, drug) - `c_(0|1)`(p, drug) * `s_k_01`(j, drug)), min(1, `F_(0|1)`(j, drug) + `c_(0|1)`(p, drug) * `s_k_01`(j, drug))))
}
"B_(1|1)_restr" <- function(j, p, drug){
as.numeric(c(max(0, `F_(1|1)`(j, drug) - `c_(1|1)`(p, drug) * `s_k_11`(j, drug)), min(1, `F_(1|1)`(j, drug) + `c_(1|1)`(p, drug) * `s_k_11`(j, drug))))
}
################ Plots ####################
library(ggplot2)
library(Cairo)
# (0|0)
x_values <- 0:4
y_values_lower <- c(`B_(0|0)`(1, p, drug)[1], `B_(0|0)`(2, p, drug)[1], `B_(0|0)`(3, p, drug)[1], `B_(0|0)`(4, p, drug)[1], `B_(0|0)`(5, p, drug)[1])
y_values_upper <- c(`B_(0|0)`(1, p, drug)[2], `B_(0|0)`(2, p, drug)[2], `B_(0|0)`(3, p, drug)[2], `B_(0|0)`(4, p, drug)[2], `B_(0|0)`(5, p, drug)[2])
y_values <- c(`F_(0|0)`(1, drug), `F_(0|0)`(2, drug), `F_(0|0)`(3, drug), `F_(0|0)`(4, drug), `F_(0|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p11 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
# (1|0)
x_values <- 0:4
y_values_lower <- c(`B_(1|0)`(1, p, drug)[1], `B_(1|0)`(2, p, drug)[1], `B_(1|0)`(3, p, drug)[1], `B_(1|0)`(4, p, drug)[1], `B_(1|0)`(5, p, drug)[1])
y_values_upper <- c(`B_(1|0)`(1, p, drug)[2], `B_(1|0)`(2, p, drug)[2], `B_(1|0)`(3, p, drug)[2], `B_(1|0)`(4, p, drug)[2], `B_(1|0)`(5, p, drug)[2])
y_values <- c(`F_(1|0)`(1, drug), `F_(1|0)`(2, drug), `F_(1|0)`(3, drug), `F_(1|0)`(4, drug), `F_(1|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p12 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
# (0|1)
x_values <- 0:4
y_values_lower <- c(`B_(0|1)`(1, p, drug)[1], `B_(0|1)`(2, p, drug)[1], `B_(0|1)`(3, p, drug)[1], `B_(0|1)`(4, p, drug)[1], `B_(0|1)`(5, p, drug)[1])
y_values_upper <- c(`B_(0|1)`(1, p, drug)[2], `B_(0|1)`(2, p, drug)[2], `B_(0|1)`(3, p, drug)[2], `B_(0|1)`(4, p, drug)[2], `B_(0|1)`(5, p, drug)[2])
y_values <- c(`F_(0|1)`(1, drug), `F_(0|1)`(2, drug), `F_(0|1)`(3, drug), `F_(0|1)`(4, drug), `F_(0|1)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p13 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
# (1|1)
x_values <- 0:4
y_values_lower <- c(`B_(1|1)`(1, p, drug)[1], `B_(1|1)`(2, p, drug)[1], `B_(1|1)`(3, p, drug)[1], `B_(1|1)`(4, p, drug)[1], `B_(1|1)`(5, p, drug)[1])
y_values_upper <- c(`B_(1|1)`(1, p, drug)[2], `B_(1|1)`(2, p, drug)[2], `B_(1|1)`(3, p, drug)[2], `B_(1|1)`(4, p, drug)[2], `B_(1|1)`(5, p, drug)[2])
y_values <- c(`F_(1|1)`(1, drug), `F_(1|1)`(2, drug), `F_(1|1)`(3, drug), `F_(1|1)`(4, drug), `F_(1|1)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p14 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(0_0)_rec.pdf"), plot = p11, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(1_0)_rec.pdf"), plot = p12, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(0_1)_rec.pdf"), plot = p13, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(1_1)_rec.pdf"), plot = p14, device = cairo_pdf, width = 5, height = 5)
x_values <- 0:4
y_values_lower <- c(`B_(0|0)_restr`(1, p, drug)[1], `B_(0|0)_restr`(2, p, drug)[1], `B_(0|0)_restr`(3, p, drug)[1], `B_(0|0)_restr`(4, p, drug)[1], `B_(0|0)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(0|0)_restr`(1, p, drug)[2], `B_(0|0)_restr`(2, p, drug)[2], `B_(0|0)_restr`(3, p, drug)[2], `B_(0|0)_restr`(4, p, drug)[2], `B_(0|0)_restr`(5, p, drug)[2])
y_values <- c(`F_(0|0)`(1, drug), `F_(0|0)`(2, drug), `F_(0|0)`(3, drug), `F_(0|0)`(4, drug), `F_(0|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p15 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
# (1|0)
x_values <- 0:4
y_values_lower <- c(`B_(1|0)_restr`(1, p, drug)[1], `B_(1|0)_restr`(2, p, drug)[1], `B_(1|0)_restr`(3, p, drug)[1], `B_(1|0)_restr`(4, p, drug)[1], `B_(1|0)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(1|0)_restr`(1, p, drug)[2], `B_(1|0)_restr`(2, p, drug)[2], `B_(1|0)_restr`(3, p, drug)[2], `B_(1|0)_restr`(4, p, drug)[2], `B_(1|0)_restr`(5, p, drug)[2])
y_values <- c(`F_(1|0)`(1, drug), `F_(1|0)`(2, drug), `F_(1|0)`(3, drug), `F_(1|0)`(4, drug), `F_(1|0)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p16 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
# (0|1)
x_values <- 0:4
y_values_lower <- c(`B_(0|1)_restr`(1, p, drug)[1], `B_(0|1)_restr`(2, p, drug)[1], `B_(0|1)_restr`(3, p, drug)[1], `B_(0|1)_restr`(4, p, drug)[1], `B_(0|1)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(0|1)_restr`(1, p, drug)[2], `B_(0|1)_restr`(2, p, drug)[2], `B_(0|1)_restr`(3, p, drug)[2], `B_(0|1)_restr`(4, p, drug)[2], `B_(0|1)_restr`(5, p, drug)[2])
y_values <- c(`F_(0|1)`(1, drug), `F_(0|1)`(2, drug), `F_(0|1)`(3, drug), `F_(0|1)`(4, drug), `F_(0|1)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p17 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
# (1|1)
x_values <- 0:4
y_values_lower <- c(`B_(1|1)_restr`(1, p, drug)[1], `B_(1|1)_restr`(2, p, drug)[1], `B_(1|1)_restr`(3, p, drug)[1], `B_(1|1)_restr`(4, p, drug)[1], `B_(1|1)_restr`(5, p, drug)[1])
y_values_upper <- c(`B_(1|1)_restr`(1, p, drug)[2], `B_(1|1)_restr`(2, p, drug)[2], `B_(1|1)_restr`(3, p, drug)[2], `B_(1|1)_restr`(4, p, drug)[2], `B_(1|1)_restr`(5, p, drug)[2])
y_values <- c(`F_(1|1)`(1, drug), `F_(1|1)`(2, drug), `F_(1|1)`(3, drug), `F_(1|1)`(4, drug), `F_(1|1)`(5, drug))
data <- data.frame(x = x_values, y_l = y_values_lower, y_u = y_values_upper, y = y_values)
ribbon_data <-
tibble(
x = c(0, 1 - .Machine$double.eps, 1, 2 - .Machine$double.eps, 2, 3 - .Machine$double.eps, 3, 4 - .Machine$double.eps, 4, 5 - .Machine$double.eps),
y_l = rep(y_values_lower, rep(2, 5)),
y_u = rep(y_values_upper, rep(2, 5)))
p18 <- ggplot2::ggplot(data = data) +
geom_segment(aes(x = x, y = y, xend = 1:5, yend = y)) +
geom_ribbon(data = ribbon_data, aes(x = x, ymin = y_l, ymax = y_u), alpha = 0.5) +
xlab("y") + ylab("p") + theme_bw() + ylim(c(0,1))
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(0_0)_restr_rec.pdf"), plot = p15, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(1_0)_restr_rec.pdf"), plot = p16, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(0_1)_restr_rec.pdf"), plot = p17, device = cairo_pdf, width = 5, height = 5)
ggsave(filename = paste0("/Users/lukaswermuth/Library/CloudStorage/Dropbox/GLW/Plots/DistributionRegression_201520172019_rec/", drug, "/(1_1)_restr_rec.pdf"), plot = p18, device = cairo_pdf, width = 5, height = 5)
}
here()
library(here)
here()
# ============================================================
# Title:      Coverage Simulations for Confidence Intervals
# Author:     Jan-Lukas Wermuth
# Date:       2025-04-29
# Purpose:    This script simulates the empirical coverage rates
#             for all the DGPs considered in the paper.
# ============================================================
rm(list = ls())
library(devtools)
library(arrangements)
library(rstatix)
library(foreach)
library(readxl)
library(doParallel)
library(DescTools)
library(compositions)
library(mvtnorm)
library(here)
setwd("~Dropbox/Pohle Wermuth/NominalCorrelation/replication_NCor")
invisible(lapply(list.files("results/Simulations/True_gammas", pattern = "\\.RData$", full.names = TRUE), function(x) load(x, envir = globalenv())))
invisible(lapply(list.files("code/functions", pattern = "\\.R$", full.names = TRUE), source))
print(c(rho, n, i))
rho <- 0
n <- 50
i <- 1
print(c(rho, n, i))
XY <- Gen_RegressionDGP(n, rho, i, Inf) # Generates data according to specified DGP
res <- NCor(XY[,1], XY[,2], nominal = "r", CIs = TRUE, Test = FALSE)[[1]]
XY
MC <- 10
library(devtools)
library(arrangements)
library(rstatix)
library(foreach)
library(readxl)
library(doParallel)
library(DescTools)
library(compositions)
library(mvtnorm)
library(here)
# install_github("jan-lukas-wermuth/NCor")
library(NCor)
invisible(lapply(list.files(here("results/Simulations/True_gammas"), pattern = "\\.RData$", full.names = TRUE), function(x) load(x, envir = globalenv())))
invisible(lapply(list.files(here("code/functions"), pattern = "\\.R$", full.names = TRUE), source))
source("~/Library/CloudStorage/Dropbox/Pohle Wermuth/NominalCorrelation/R code/NCor_Test.R")
SampleSizes <- c(50, 200, 800)
categories <- c("A", "B", "C")
# Regression Normal -------------------------------------------------------
rhos <- (seq(0, 1, length.out = 100))^2 * 4
decision_wermuth_array <- array(data = NA, dim = c(length(SampleSizes), MC, length(rhos)), dimnames = list(SampleSizes, 1:MC, rhos))
for (rho in rhos){
for (n in SampleSizes){
for (i in 1:MC){
print(c(rho, n, i))
XY <- Gen_RegressionDGP(n, rho, i, Inf) # Generates data according to specified DGP
res <- NCor(XY[,1], XY[,2], nominal = "r", CIs = TRUE, Test = FALSE)[[1]]
decision_wermuth_array[as.character(n),as.character(i),as.character(rho)] <- as.numeric(data.table::between(gammas_RegNorm[as.character(rho)], res[2], res[3]))
}
}
}
print(c(rho, n, i))
XY <- Gen_RegressionDGP(n, rho, i, Inf) # Generates data according to specified DGP
res <- NCor(XY[,1], XY[,2], nominal = "r", Inference = TRUE)[[1]]
XY
X <- XY[,1]
X
Y <- XY[,2]
ContTable <- table(X, Y)
n <- sum(ContTable)
n
# Start cluster for parallel computing
cl <- parallel::makeCluster(parallel::detectCores() - 1, type = "PSOCK")
doParallel::registerDoParallel(cl)
on.exit(parallel::stopCluster(cl)) # Need to stop the parallel computing
dim_r <- nrow(ContTable)
rows <- factorial(dim_r)
results <- foreach::foreach(iperm_r = arrangements::ipermutations(dim_r, dim_r), i = 1:rows, .combine = 'c') %dopar% {
rownames(ContTable) <- iperm_r
cases <- rstatix::counts_to_cases(ContTable)
gamma_info <- DescTools:::.DoCount(as.numeric(as.vector.factor(cases[,1])), as.numeric(as.vector.factor(cases[,2])))
(gamma_info$C - gamma_info$D) / (gamma_info$C + gamma_info$D)
}
rho
iperm_r <- arrangements::ipermutations(dim_r, dim_r)
permutations <- iperm_r$collect()
A1 <- matrix(0, nrow = rows, ncol = 2 * rows)
Sigma_U1 <- matrix(NA, nrow = 2 * rows, ncol = 2 * rows)
for (i in 1:rows) {
rownames(ContTable) <- permutations[i,]
cases <- rstatix::counts_to_cases(ContTable)
X <- as.numeric(as.vector.factor(cases[,1]))
Y <- as.numeric(as.vector.factor(cases[,2]))
tau_info <- DescTools:::.DoCount(X, Y)
tau <- (tau_info$C - tau_info$D) / choose(n, 2)
X_TieProb <- sum((table(X)/length(X))^2)
Y_TieProb <- sum((table(Y)/length(Y))^2)
XY_TieProb <- sum((table(X, Y)/length(X))^2)
tie_prob <- X_TieProb + Y_TieProb - XY_TieProb
A1[i,2*i-1] <- 1 / (1 - tie_prob)
A1[i,2*i] <- tau / (1 - tie_prob)^2
G_XY <- Vectorize(function(x_val, y_val) (mean(X <= x_val & Y <= y_val) + mean(X <= x_val & Y < y_val) + mean(X < x_val & Y <= y_val) + mean(X < x_val & Y < y_val)) / 4)
G_X <- Vectorize(function(x_val) (mean(X < x_val) + mean(X <= x_val)) / 2)
G_Y <- Vectorize(function(y_val) (mean(Y < y_val) + mean(Y <= y_val)) / 2)
x_eq <- Vectorize(function(x_val) mean(X == x_val))
y_eq <- Vectorize(function(y_val) mean(Y == y_val))
x_eq_y_eq <- Vectorize(function(x_val, y_val) mean(X == x_val & Y == y_val))
# Calculate Marc's variance estimator
G_XYXY <- G_XY(X, Y)
G_XX <- G_X(X)
G_YY <- G_Y(Y)
x_eqX <- x_eq(X)
y_eqY <- y_eq(Y)
x_eq_y_eqXY <- x_eq_y_eq(X, Y)
Sigma_U1[2*i-1,2*i-1] <- 4 * mean((4 * G_XYXY - 2 * (G_XX + G_YY) + 1 - tau)^2)
Sigma_U1[2*i,2*i] <- 4 * mean((x_eqX + y_eqY - x_eq_y_eqXY - tie_prob)^2)
Sigma_U1[2*i,2*i-1] <- 4 * mean((4 * G_XYXY - 2 * (G_XX + G_YY) + 1 - tau) * (x_eqX + y_eqY - x_eq_y_eqXY - tie_prob))
if (i < rows){
for (j in (i+1):rows) {
rownames(ContTable) <- permutations[j,]
cases <- rstatix::counts_to_cases(ContTable)
X_j <- as.numeric(as.vector.factor(cases[,1]))
Y_j <- as.numeric(as.vector.factor(cases[,2]))
tau_info_j <- DescTools:::.DoCount(X_j, Y_j)
tau_j <- (tau_info_j$C - tau_info_j$D) / choose(n, 2)
X_TieProb_j <- sum((table(X_j)/length(X_j))^2)
Y_TieProb_j <- sum((table(Y_j)/length(Y_j))^2)
XY_TieProb_j <- sum((table(X_j, Y_j)/length(X_j))^2)
tie_prob_j <- X_TieProb_j + Y_TieProb_j - XY_TieProb_j
G_XY_j <- Vectorize(function(x_val, y_val) (mean(X_j <= x_val & Y_j <= y_val) + mean(X_j <= x_val & Y_j < y_val) + mean(X_j < x_val & Y_j <= y_val) + mean(X_j < x_val & Y_j < y_val)) / 4)
G_X_j <- Vectorize(function(x_val) (mean(X_j < x_val) + mean(X_j <= x_val)) / 2)
G_Y_j <- Vectorize(function(y_val) (mean(Y_j < y_val) + mean(Y_j <= y_val)) / 2)
x_eq_j <- Vectorize(function(x_val) mean(X_j == x_val))
y_eq_j <- Vectorize(function(y_val) mean(Y_j == y_val))
x_eq_y_eq_j <- Vectorize(function(x_val, y_val) mean(X_j == x_val & Y_j == y_val))
# Calculate Marc's variance estimator
G_XYXY_j <- G_XY_j(X_j, Y_j)
G_XX_j <- G_X_j(X_j)
G_YY_j <- G_Y_j(Y_j)
x_eqX_j <- x_eq_j(X_j)
y_eqY_j <- y_eq_j(Y_j)
x_eq_y_eqXY_j <- x_eq_y_eq_j(X_j, Y_j)
Sigma_U1[2*j,2*i-1] <- 4 * mean((4 * G_XYXY - 2 * (G_XX + G_YY) + 1 - tau) * (x_eqX_j + y_eqY_j - x_eq_y_eqXY_j - tie_prob_j))
Sigma_U1[2*j-1,2*i-1] <- 4 * mean((4 * G_XYXY - 2 * (G_XX + G_YY) + 1 - tau) * (4 * G_XYXY_j - 2 * (G_XX_j + G_YY_j) + 1 - tau_j))
Sigma_U1[2*j,2*i] <- 4 * mean((x_eqX + y_eqY - x_eq_y_eqXY - tie_prob) * (x_eqX_j + y_eqY_j - x_eq_y_eqXY_j - tie_prob_j))
Sigma_U1[2*j-1,2*i] <- 4 * mean((x_eqX + y_eqY - x_eq_y_eqXY - tie_prob) * (4 * G_XYXY_j - 2 * (G_XX_j + G_YY_j) + 1 - tau_j))
}
}
}
Sigma_U1 <- Matrix::forceSymmetric(Sigma_U1, uplo = "L")
Sigma1 <- as.matrix(A1 %*% Sigma_U1 %*% t(A1))
p_val <- 1 - mvtnorm::pmvnorm(lower = -Inf, upper = rep(sqrt(n)*max(results), rows), mean = rep(0, rows), sigma = Sigma1)[1]
CI_lower <- max(results) - quantile_max(rep(0, rows), Sigma1, 1 - alpha/2)/sqrt(n)
alpha <- 0.1
CI_lower <- max(results) - quantile_max(rep(0, rows), Sigma1, 1 - alpha/2)/sqrt(n)
Sigma1
rep(0, rows)
quantile_max(rep(0, rows), Sigma1, 1 - alpha/2)
#' @keywords internal
quantile_max <- function(mu, Sigma, p) {
k <- length(mu)
f <- function(x) {
mvtnorm::pmvnorm(upper = rep(x, k), mean = mu, sigma = Sigma)[[1]] - p
}
uniroot(f, interval = c(-10, 10))$root
}
quantile_max(rep(0, rows), Sigma1, 1 - alpha/2)
quantile_max(rep(0, rows), Sigma1, 0.01)
quantile_max(rep(0, rows), Sigma1, 0.1)
quantile_max(rep(0, rows), Sigma1, 0.3)
quantile_max(rep(0, rows), Sigma1, 0.7)
quantile_max(rep(0, rows), Sigma1, 0.9)
quantile_max(rep(0, rows), Sigma1, 0.99)
#' @keywords internal
quantile_max <- function(mu, Sigma, p) {
k <- length(mu)
f <- function(x) {
mvtnorm::pmvnorm(upper = rep(x, k), mean = mu, sigma = Sigma)[[1]] - p
}
uniroot(f, interval = c(-100, 100))$root
}
quantile_max(rep(0, rows), Sigma1, 0.99)
quantile_max(rep(0, rows), Sigma1, 0.94)
quantile_max(rep(0, rows), Sigma1, 0.1)
quantile_max(rep(0, rows), Sigma1, 0.01)
CI_lower <- max(results) - quantile_max(rep(0, rows), Sigma1, 1 - alpha/2)/sqrt(n)
CI_upper <- max(results) - quantile_max(rep(0, rows), Sigma1, alpha/2)/sqrt(n)
max(results)
