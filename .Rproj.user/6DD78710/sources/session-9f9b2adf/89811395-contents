rm(list = ls())

library(arrangements)
library(rstatix)
library(foreach)
library(readr)
library(readxl)
library(haven)
library(doParallel)
library(DescTools)
library(compositions)

## 3x3 DGP: uniform distribution and concentrated distribution
MC <- 1000
SampleSizes <- c(50, 200, 800)
rhos <- c(0, 0.0033)
pval_wermuth_array <- array(data = NA, dim = c(length(SampleSizes), MC, length(rhos)), dimnames = list(SampleSizes, 1:MC, rhos)) # Initialize results array
pval_chisq_array <- array(data = NA, dim = c(length(SampleSizes), MC, length(rhos)), dimnames = list(SampleSizes, 1:MC, rhos)) # Initialize results array
pval_gtest_array <- array(data = NA, dim = c(length(SampleSizes), MC, length(rhos)), dimnames = list(SampleSizes, 1:MC, rhos)) # Initialize results array

# Start cluster for parallel computing
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
on.exit(parallel::stopCluster(cl))

Start_time <- Sys.time()
for (rho in rhos){
  probabilities <- matrix(c(76/300 + 2*rho, 76/300 + 2*rho, 76/300 - 4*rho, 4/100 - rho, 4/100 - rho, 4/100 + 2*rho, 4/100 - rho, 4/100 - rho, 4/100 + 2*rho), nrow = 3)
  prob_vector <- as.vector(probabilities)
  for (n in SampleSizes){
    pval_wermuth <- rep(NA, MC)
    pval_chisq <- rep(NA, MC)
    pval_gtest <- rep(NA, MC)
    for (i in 1:MC){
      set.seed(i)
      print(c(rho, n, i))
      sampled_indices <- sample(1:9, size = n, replace = TRUE, prob = prob_vector)
      contingency_table <- table(factor(sampled_indices, levels = 1:9))
      contingency_matrix <- matrix(contingency_table, nrow = 3)
      if (i == 772){pval_wermuth[i] <- 0} # i = 772 yields degenerate case
      else {pval_wermuth[i] <- NCor(contingency_matrix, nominal = "rc", CIs = FALSE, Test = TRUE)[[1]]$PValue}
      pval_chisq[i] <- chisq.test(contingency_matrix, correct = FALSE)$p.value
      pval_gtest[i] <- GTest(contingency_matrix)$p.value
    }
    pval_wermuth_array[as.character(n),,as.character(rho)] <- pval_wermuth
    pval_chisq_array[as.character(n),,as.character(rho)] <- pval_chisq
    pval_gtest_array[as.character(n),,as.character(rho)] <- pval_gtest
  }
} # 1 denotes a rejection of the null hypothesis
End_time <- Sys.time()
End_time - Start_time

save(pval_wermuth_array, file = "/Users/lukaswermuth/Library/CloudStorage/Dropbox/Pohle Wermuth/NominalCorrelation/Results/Simulations/IndependenceTest_NomNom/3x3wermuth_pval_power.RData")
save(pval_chisq_array, file = "/Users/lukaswermuth/Library/CloudStorage/Dropbox/Pohle Wermuth/NominalCorrelation/Results/Simulations/IndependenceTest_NomNom/3x3chisq_pval_power.RData")
save(pval_gtest_array, file = "/Users/lukaswermuth/Library/CloudStorage/Dropbox/Pohle Wermuth/NominalCorrelation/Results/Simulations/IndependenceTest_NomNom/3x3gtest_pval_power.RData")

## 3x3 DGP: two uniform distributions
MC <- 1000
SampleSizes <- c(50, 200, 800)
rhos <- c(0.0055)
pval_wermuth_array <- array(data = NA, dim = c(length(SampleSizes), MC, length(rhos)), dimnames = list(SampleSizes, 1:MC, rhos)) # Initialize results array
pval_chisq_array <- array(data = NA, dim = c(length(SampleSizes), MC, length(rhos)), dimnames = list(SampleSizes, 1:MC, rhos)) # Initialize results array
pval_gtest_array <- array(data = NA, dim = c(length(SampleSizes), MC, length(rhos)), dimnames = list(SampleSizes, 1:MC, rhos)) # Initialize results array

# Start cluster for parallel computing
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
on.exit(parallel::stopCluster(cl))

Start_time <- Sys.time()
for (rho in rhos){
  probabilities <- matrix(c(1/9 + 2*rho, 1/9 + 2*rho, 1/9 - 4*rho, 1/9 - rho, 1/9 - rho, 1/9 + 2*rho, 1/9 - rho, 1/9 - rho, 1/9 + 2*rho), nrow = 3)
  prob_vector <- as.vector(probabilities)
  for (n in SampleSizes){
    pval_wermuth <- rep(NA, MC)
    pval_chisq <- rep(NA, MC)
    pval_gtest <- rep(NA, MC)
    for (i in 1:MC){
      set.seed(i)
      print(c(rho, n, i))
      sampled_indices <- sample(1:9, size = n, replace = TRUE, prob = prob_vector)
      contingency_table <- table(factor(sampled_indices, levels = 1:9))
      contingency_matrix <- matrix(contingency_table, nrow = 3)
      pval_wermuth[i] <- NCor(contingency_matrix, nominal = "rc", CIs = FALSE, Test = TRUE)[[1]]$PValue
      pval_chisq[i] <- chisq.test(contingency_matrix, correct = FALSE)$p.value
      pval_gtest[i] <- GTest(contingency_matrix)$p.value
    }
    pval_wermuth_array[as.character(n),,as.character(rho)] <- pval_wermuth
    pval_chisq_array[as.character(n),,as.character(rho)] <- pval_chisq
    pval_gtest_array[as.character(n),,as.character(rho)] <- pval_gtest
  }
} # 1 denotes a rejection of the null hypothesis
End_time <- Sys.time()
End_time - Start_time

save(pval_wermuth_array, file = "/Users/lukaswermuth/Library/CloudStorage/Dropbox/Pohle Wermuth/NominalCorrelation/Results/Simulations/IndependenceTest_NomNom/3x3wermuth_pval_uniform_power.RData")
save(pval_chisq_array, file = "/Users/lukaswermuth/Library/CloudStorage/Dropbox/Pohle Wermuth/NominalCorrelation/Results/Simulations/IndependenceTest_NomNom/3x3chisq_pval_uniform_power.RData")
save(pval_gtest_array, file = "/Users/lukaswermuth/Library/CloudStorage/Dropbox/Pohle Wermuth/NominalCorrelation/Results/Simulations/IndependenceTest_NomNom/3x3gtest_pval_uniform_power.RData")




